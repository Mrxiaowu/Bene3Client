#pragma once
#include "uart/ProtocolSender.h"
#include <string>
#include <cstdlib>
#include <iostream>
using namespace std;

#define STB_IMAGE_WRITE_IMPLEMENTATION		// 要在导入头文件前，定义该宏
#include "activity/imageWrite.h"



static S_ACTIVITY_TIMEER REGISTER_ACTIVITY_TIMER_TAB[] = {
	//{0,  6000}, //定时器id=0, 时间间隔6秒
	//{1,  1000},
};

/**
 * 当界面构造时触发
 */
static SProtocolData mProtocolData;
static void onUI_init(){
	LOGD("printjob onUI_init !!!\n"); //06FF011F01DA
	sendSampleProtocol(0x06, 0xFF, 0x01, 0x1F, 0x01);
}

/**
 * 当切换到该界面时触发
 */
static void onUI_intent(const Intent *intentPtr) {
    if (intentPtr != NULL) {
        //TODO
    }
}

/*
 * 当界面显示时触发
 */
static void onUI_show() {

}


static void onUI_hide() { //当界面隐藏时触发

}


static void onUI_quit() {//当界面完全退出时触发

}

static string convertHsxStringToNormal(string hexString){
    string Normalstr = "";
    int i;
    for(i=hexString.length() ;i >= 2;i=i-2){
        Normalstr.append(hexString.substr(i-2,2));
    }
    return  Normalstr;
}


//static void MySaveJPG(string hexString1) {
static void MySaveJPG(BYTE *hexArray ,int hexArrayLength) {

	const int dw = 200, dh = 112;
	const int n = 3;	// rgb

	int totalsize = dw * dh;
	uint8_t *buffer = (uint8_t *) malloc(totalsize * n); // 存储转化后的图像数据
	memset(buffer, 0xFF, totalsize * n);	// 对数组清零

//	原始字符串
//	hexString
	//转化后的字符串
//	string convertHexString = convertHsxStringToNormal(hexString1);

	std::vector<uint8_t> hexArray2;
	for(int i=0;i < hexArrayLength; i++){
		for(int j=0; j < 8 ;j++){
			bool ret = (hexArray[i] >> (7-j)) & 0x01;
			if(ret)
				hexArray2.push_back(0xFF);
			 else
				hexArray2.push_back(0x00);
		}
	}

	for(int i = 0; i < totalsize; i++) {
		buffer[i*3] = buffer[i*3+1] = buffer[i*3+2] = hexArray2[i];
	}

	int ret = stbi_write_jpg("/mnt/extsd/1.jpg", dw, dh, n, buffer, 100);
	LOGD("ret %d\n", ret);
	free(buffer);
}


static void onProtocolDataUpdate(const SProtocolData &data) { //串口数据回调接口

	if(data.page != 9){
		LOGD("当前读取的串口信息中的PageID不为9");
		return;
	} else {
		LOGD("进入打印任务页面");
	}
	//直接用data的是可以的！！！！

	LOGD("data.pdata %x", data.pdata);
	if(data.region == 16){
		if(data.type == 1){
			if(data.label == 45){
				myzhouTextPtr->setText(data.pdata);
			} else if(data.label == 46){
				mlayerTextPtr->setText(data.pdata);
			} else if(data.label == 47){
				mlayerspeedTextPtr->setText(data.pdata);
			} else if(data.label == 48){
				mprintstatusTextPtr->setText(data.pdata);
			}
		} else if(data.type == 4 && data.label == 22){
			mfilenameTextPtr->setText(data.pdata);
		}
	} else if(data.region == 17){
		if(data.type == 4 && data.label == 23){
			mprinttimeTextPtr->setText(data.pdata);
		} else if(data.type == 12 && data.label == 0){
			mCirclebar1Ptr->setProgress(16);
		}
	}

	//这里避免其他命令也会进入这里
	if(data.region == 16 && data.type == 10 && data.label == 2){
		LOGD("这是在传输图片");
		MySaveJPG(data.imageData,data.imageLength);
		mprintImagePtr->setBackgroundPic("/mnt/extsd/1.jpg");
	}
}


static bool onUI_Timer(int id){
	switch (id) {

		default:
			break;
	}
    return true;
}


static bool onprintJobActivityTouchEvent(const MotionEvent &ev) {

	return false;
}

//返回按钮
static bool onButtonClick_sys_back(ZKButton *pButton) {
	EASYUICONTEXT->openActivity("mainActivity");
	LOGD(" ButtonClick sys_back !!!\n");
	return false;
}

//取消按钮
static bool onButtonClick_cancell(ZKButton *pButton) {
    LOGD(" ButtonClick cancell !!!\n");//09FF012A01CC
    mprintImagePtr->setBackgroundPic("/mnt/extsd/ui/480x272.jpg");
	sendSampleProtocol(0x09, 0xFF, 0x01, 0x2A, 0x01);
    return false;
}

//停止按钮
static bool onButtonClick_stop(ZKButton *pButton) {
    LOGD(" ButtonClick stop !!!\n");//09FF012C01CA
    mprintImagePtr->setBackgroundPic("/mnt/extsd/1.jpg");
    sendSampleProtocol(0x09, 0xFF, 0x01, 0x2C, 0x01);
    return false;
}
static bool onButtonClick_line(ZKButton *pButton) {
    //LOGD(" ButtonClick line !!!\n");
    return false;
}
